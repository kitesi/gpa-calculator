generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Year {
  yearValue Int
  userId    String
  id        String     @id @default(cuid())
  classes   Class[]
  semesters Semester[]
  user      User       @relation(fields: [userId], references: [id])

  @@unique([yearValue, userId])
  @@map("years")
}

model Semester {
  id        String  @id @default(cuid())
  name      String
  yearValue Int
  userId    String
  yearId    String
  classes   Class[]
  user      User    @relation(fields: [userId], references: [id])
  year      Year    @relation(fields: [yearId], references: [id])

  @@unique([name, yearId])
  @@map("semesters")
}

model Class {
  assignedGrade String?
  className     String
  credits       Int
  desiredGrade  Float?
  userId        String
  semesterId    String
  id            String         @id @default(cuid())
  yearId        String
  semester      Semester       @relation(fields: [semesterId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  year          Year           @relation(fields: [yearId], references: [id])
  gradeSections GradeSection[]

  @@unique([className, userId])
  @@map("classes")
}

model GradeSection {
  id      String @id @default(cuid())
  weight  Float
  name    String
  data    String
  classId String
  class   Class  @relation(fields: [classId], references: [id])

  @@unique([name, classId])
  @@map("gradesections")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  classes       Class[]
  semesters     Semester[]
  sessions      Session[]
  years         Year[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
